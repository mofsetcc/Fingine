"""
Comprehensive unit tests for user models.
"""

import pytest
from datetime import datetime
from uuid import uuid4

from app.models.user import User, UserProfile, UserOAuthIdentity
from app.models.base import Base


class TestUserModel:
    """Test cases for User model."""
    
    def test_user_creation_with_required_fields(self):
        """Test creating a user with only required fields."""
        user = User(email="test@example.com")
        
        assert user.email == "test@example.com"
        assert user.password_hash is None
        assert user.email_verified_at is None
        # UUID is generated by database default, not at model creation
        assert hasattr(user, 'id')
        # Timestamps are set by database defaults
        assert hasattr(user, 'created_at')
        assert hasattr(user, 'updated_at')
    
    def test_user_creation_with_all_fields(self):
        """Test creating a user with all fields."""
        user_id = uuid4()
        user = User(
            id=user_id,
            email="test@example.com",
            password_hash="hashed_password",
            email_verified_at="2024-01-01T00:00:00Z"
        )
        
        assert user.id == user_id
        assert user.email == "test@example.com"
        assert user.password_hash == "hashed_password"
        assert user.email_verified_at == "2024-01-01T00:00:00Z"
    
    def test_user_email_uniqueness_constraint(self):
        """Test that email field has unique constraint."""
        # This would be tested at database level in integration tests
        # Here we just verify the model definition
        assert User.__table__.columns['email'].unique is True
        assert User.__table__.columns['email'].nullable is False
    
    def test_user_relationships_defined(self):
        """Test that user relationships are properly defined."""
        user = User(email="test@example.com")
        
        # Check that relationship attributes exist
        assert hasattr(user, 'profile')
        assert hasattr(user, 'oauth_identities')
        assert hasattr(user, 'subscription')
        assert hasattr(user, 'watchlist')
        assert hasattr(user, 'api_usage_logs')


class TestUserProfileModel:
    """Test cases for UserProfile model."""
    
    def test_user_profile_creation_with_required_fields(self):
        """Test creating a user profile with only required fields."""
        user_id = uuid4()
        profile = UserProfile(user_id=user_id)
        
        assert profile.user_id == user_id
        assert profile.display_name is None
        assert profile.avatar_url is None
        # Default values are set by database, not at model creation
        assert hasattr(profile, 'timezone')
        assert hasattr(profile, 'notification_preferences')
    
    def test_user_profile_creation_with_all_fields(self):
        """Test creating a user profile with all fields."""
        user_id = uuid4()
        notification_prefs = {"email": True, "push": False}
        
        profile = UserProfile(
            user_id=user_id,
            display_name="Test User",
            avatar_url="https://example.com/avatar.jpg",
            timezone="America/New_York",
            notification_preferences=notification_prefs
        )
        
        assert profile.user_id == user_id
        assert profile.display_name == "Test User"
        assert profile.avatar_url == "https://example.com/avatar.jpg"
        assert profile.timezone == "America/New_York"
        assert profile.notification_preferences == notification_prefs
    
    def test_user_profile_default_values(self):
        """Test default values for user profile."""
        user_id = uuid4()
        profile = UserProfile(user_id=user_id, timezone="Asia/Tokyo", notification_preferences={})
        
        assert profile.timezone == "Asia/Tokyo"
        assert profile.notification_preferences == {}
    
    def test_user_profile_constraints(self):
        """Test user profile field constraints."""
        # Check display_name length constraint
        assert UserProfile.__table__.columns['display_name'].type.length == 50
        
        # Check timezone and avatar_url constraints
        assert UserProfile.__table__.columns['timezone'].nullable is False
        assert UserProfile.__table__.columns['avatar_url'].nullable is True


class TestUserOAuthIdentityModel:
    """Test cases for UserOAuthIdentity model."""
    
    def test_oauth_identity_creation(self):
        """Test creating an OAuth identity."""
        user_id = uuid4()
        oauth_identity = UserOAuthIdentity(
            provider="google",
            provider_user_id="google_user_123",
            user_id=user_id
        )
        
        assert oauth_identity.provider == "google"
        assert oauth_identity.provider_user_id == "google_user_123"
        assert oauth_identity.user_id == user_id
    
    def test_oauth_identity_composite_primary_key(self):
        """Test that OAuth identity uses composite primary key."""
        # Check that both provider and provider_user_id are primary keys
        primary_keys = [col.name for col in UserOAuthIdentity.__table__.primary_key.columns]
        assert "provider" in primary_keys
        assert "provider_user_id" in primary_keys
        assert len(primary_keys) == 2
    
    def test_oauth_identity_provider_constraints(self):
        """Test OAuth identity provider field constraints."""
        provider_col = UserOAuthIdentity.__table__.columns['provider']
        provider_user_id_col = UserOAuthIdentity.__table__.columns['provider_user_id']
        
        assert provider_col.type.length == 50
        assert provider_user_id_col.type.length == 255
        assert provider_col.primary_key is True
        assert provider_user_id_col.primary_key is True
    
    def test_oauth_identity_user_relationship(self):
        """Test OAuth identity user relationship."""
        user_id = uuid4()
        oauth_identity = UserOAuthIdentity(
            provider="line",
            provider_user_id="line_user_456",
            user_id=user_id
        )
        
        assert hasattr(oauth_identity, 'user')
        assert oauth_identity.user_id == user_id


class TestUserModelIntegration:
    """Integration tests for user models working together."""
    
    def test_user_with_profile_creation(self):
        """Test creating a user with associated profile."""
        user_id = uuid4()
        user = User(id=user_id, email="test@example.com")
        profile = UserProfile(
            user_id=user_id,
            display_name="Test User",
            timezone="Asia/Tokyo"
        )
        
        # In a real scenario, these would be linked through relationships
        assert profile.user_id == user.id
        assert user.id == user_id
    
    def test_user_with_oauth_identities(self):
        """Test creating a user with multiple OAuth identities."""
        user = User(email="test@example.com")
        
        google_identity = UserOAuthIdentity(
            provider="google",
            provider_user_id="google_123",
            user_id=user.id
        )
        
        line_identity = UserOAuthIdentity(
            provider="line",
            provider_user_id="line_456",
            user_id=user.id
        )
        
        assert google_identity.user_id == user.id
        assert line_identity.user_id == user.id
        assert google_identity.provider == "google"
        assert line_identity.provider == "line"
    
    def test_user_model_table_names(self):
        """Test that all user models have correct table names."""
        assert User.__tablename__ == "users"
        assert UserProfile.__tablename__ == "user_profiles"
        assert UserOAuthIdentity.__tablename__ == "user_oauth_identities"


@pytest.fixture
def sample_user():
    """Fixture providing a sample user for testing."""
    return User(
        email="sample@example.com",
        password_hash="hashed_password_123",
        email_verified_at="2024-01-01T00:00:00Z"
    )


@pytest.fixture
def sample_user_profile():
    """Fixture providing a sample user profile for testing."""
    user_id = uuid4()
    return UserProfile(
        user_id=user_id,
        display_name="Sample User",
        avatar_url="https://example.com/avatar.jpg",
        timezone="Asia/Tokyo",
        notification_preferences={"email": True, "push": False}
    )


@pytest.fixture
def sample_oauth_identity():
    """Fixture providing a sample OAuth identity for testing."""
    user_id = uuid4()
    return UserOAuthIdentity(
        provider="google",
        provider_user_id="google_sample_123",
        user_id=user_id
    )


class TestUserModelFixtures:
    """Test the fixtures work correctly."""
    
    def test_sample_user_fixture(self, sample_user):
        """Test sample user fixture."""
        assert sample_user.email == "sample@example.com"
        assert sample_user.password_hash == "hashed_password_123"
        assert sample_user.email_verified_at == "2024-01-01T00:00:00Z"
    
    def test_sample_user_profile_fixture(self, sample_user_profile):
        """Test sample user profile fixture."""
        assert sample_user_profile.display_name == "Sample User"
        assert sample_user_profile.timezone == "Asia/Tokyo"
        assert sample_user_profile.notification_preferences == {"email": True, "push": False}
    
    def test_sample_oauth_identity_fixture(self, sample_oauth_identity):
        """Test sample OAuth identity fixture."""
        assert sample_oauth_identity.provider == "google"
        assert sample_oauth_identity.provider_user_id == "google_sample_123"
        assert sample_oauth_identity.user_id is not None
name: Basic Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Basic validation that should always pass
  basic-checks:
    name: Basic Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check repository structure
      run: |
        echo "üîç Checking repository structure..."
        
        # Check for basic directories
        if [ -d "backend" ]; then
          echo "‚úÖ Backend directory found"
        else
          echo "‚ö†Ô∏è Backend directory not found"
        fi
        
        if [ -d "frontend" ]; then
          echo "‚úÖ Frontend directory found"
        else
          echo "‚ö†Ô∏è Frontend directory not found"
        fi
        
        # Check for key files
        if [ -f "README.md" ]; then
          echo "‚úÖ README.md found"
        else
          echo "‚ö†Ô∏è README.md not found"
        fi
        
        if [ -f "backend/requirements.txt" ]; then
          echo "‚úÖ Backend requirements.txt found"
        else
          echo "‚ö†Ô∏è Backend requirements.txt not found"
        fi
        
        if [ -f "frontend/package.json" ]; then
          echo "‚úÖ Frontend package.json found"
        else
          echo "‚ö†Ô∏è Frontend package.json not found"
        fi

    - name: Check Python syntax (if backend exists)
      if: hashFiles('backend/**/*.py') != ''
      run: |
        echo "üêç Checking Python syntax..."
        python -m py_compile backend/**/*.py || echo "‚ö†Ô∏è Python syntax issues found"

    - name: Check JSON files
      run: |
        echo "üìÑ Checking JSON files..."
        for file in $(find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*"); do
          if python -m json.tool "$file" > /dev/null 2>&1; then
            echo "‚úÖ $file is valid JSON"
          else
            echo "‚ùå $file has invalid JSON syntax"
          fi
        done

    - name: Check for common issues
      run: |
        echo "üîç Checking for common issues..."
        
        # Check for large files
        large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*" 2>/dev/null || true)
        if [ -n "$large_files" ]; then
          echo "‚ö†Ô∏è Large files found:"
          echo "$large_files"
        else
          echo "‚úÖ No large files found"
        fi
        
        # Check for secrets patterns
        if grep -r "password\|secret\|key" --include="*.py" --include="*.js" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "# " | head -5; then
          echo "‚ö†Ô∏è Potential secrets found (review manually)"
        else
          echo "‚úÖ No obvious secrets found"
        fi

    - name: Summary
      run: |
        echo "üìã Basic validation completed"
        echo "This workflow performs basic repository health checks"
        echo "For detailed testing, check the main CI workflow"

  # Test basic Python setup (if backend exists)
  python-basic:
    name: Python Basic Setup
    runs-on: ubuntu-latest
    if: hashFiles('backend/**/*.py') != ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test Python installation
      run: |
        python --version
        pip --version
        echo "‚úÖ Python setup successful"

    - name: Install basic dependencies
      working-directory: ./backend
      run: |
        if [ -f "requirements.txt" ]; then
          echo "üì¶ Installing from requirements.txt..."
          pip install -r requirements.txt || echo "‚ö†Ô∏è Some dependencies failed to install"
        else
          echo "‚ö†Ô∏è No requirements.txt found, installing basic packages"
          pip install fastapi uvicorn pytest
        fi

    - name: Test Python imports
      working-directory: ./backend
      run: |
        echo "üß™ Testing Python imports..."
        python -c "import sys; print('Python path:', sys.path)" || true
        if [ -d "app" ]; then
          python -c "import app" || echo "‚ö†Ô∏è Could not import app module"
        fi

  # Test basic Node.js setup (if frontend exists)
  nodejs-basic:
    name: Node.js Basic Setup
    runs-on: ubuntu-latest
    if: hashFiles('frontend/package.json') != ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Test Node.js installation
      run: |
        node --version
        npm --version
        echo "‚úÖ Node.js setup successful"

    - name: Install dependencies
      working-directory: ./frontend
      run: |
        if [ -f "package-lock.json" ]; then
          echo "üì¶ Installing with npm ci..."
          npm ci || echo "‚ö†Ô∏è npm ci failed, trying npm install"
          npm install || echo "‚ö†Ô∏è npm install also failed"
        elif [ -f "package.json" ]; then
          echo "üì¶ Installing with npm install..."
          npm install || echo "‚ö†Ô∏è npm install failed"
        else
          echo "‚ùå No package.json found"
          exit 1
        fi

    - name: Test basic scripts
      working-directory: ./frontend
      run: |
        echo "üß™ Testing available npm scripts..."
        npm run --silent 2>/dev/null || echo "‚ö†Ô∏è Could not list npm scripts"
        
        # Try to run basic commands
        if npm run build --if-present; then
          echo "‚úÖ Build script works"
        else
          echo "‚ö†Ô∏è Build script failed or not available"
        fi